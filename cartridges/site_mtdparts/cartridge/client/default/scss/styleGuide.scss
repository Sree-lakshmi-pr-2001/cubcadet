@import "~org/variables";
@import "~org/utilities/layout";
@import "~org/utilities/nth_of_type";
@import "~org/utilities/iconUtils";
@import "bootstrap/scss/bootstrap";
@import "~org/bootstrapOverrides";
@import "~org/typography";
//@import "~org/bootstrapOverrides/gradients";

.sg-sidenav-icon {
    position: fixed;
    top: 0;
    z-index: 2;
    padding: 0.5em;
    border-radius: 4px;
    background-color: white;
    border-bottom: 2px solid $gray-500;
    border-right: 2px solid $gray-500;

    @include media-breakpoint-up(sm) {
        display: none;
    }
}

.sg-sidenav-icon-border {
    border: none;
}

.sg-sidenav {
    font-family: $font-family-base;
    width: 100%;
    position: fixed;
    height: 180px;
    top: 0;
    display: none;
    overflow-x: hidden;
    padding: 0 1.2em;
    background-color: white;
    z-index: 1;
    padding-left: 3em;
    border-bottom: 2px solid $gray-500;

    .section-nav {
        font-weight: bold;

        a {
            color: $secondary;
            @include media-breakpoint-up(sm) {
                font-size: 14px;
            }

            @include media-breakpoint-up(md) {
                font-size: 18px;
            }
        }
    }

    @include media-breakpoint-up(sm) {
        width: 27%;
        height: 100%;
        padding: 0 1em 3em;
        display: block !important;
        left: 0;
        border: none;

        .section-nav {
            margin-top: 0.5em;
        }
    }

    @include media-breakpoint-up(md) {
        width: 21%;
    }

    li {
        list-style-type: none;
        font-size: 14px;
        padding-left: 0.3em;

        @include media-breakpoint-up(sm) {
            font-size: 14px;
        }

        @include media-breakpoint-up(md) {
            font-size: 18px;
        }
    }

    .list-link:hover {
        background-color: rgba($light, 0.3);
    }
}

.pt_styleguide {
    header,
    footer,
    .header-banner,
    .footer-email-signup {
        display: none;
    }

    .wrapper {
        margin: 1em;

        @include media-breakpoint-up(sm) {
            margin-left: 27%;
            padding-left: 1em;
        }

        @include media-breakpoint-up(md) {
            margin-left: 21%;
            padding-left: 1em;
        }
    }

    .section {
        padding: 0.5em;
        background: $gray-200;
        margin: 1em 0;

        @include media-breakpoint-up(sm) {
            padding: 0.5em 0 0.5em 1em;
        }
    }

    h1 {
        margin-top: 1em;

        @include media-breakpoint-up(sm) {
            margin-top: 0;
        }
    }

    h3,
    h4,
    p {
        word-break: break-all;

        &.sub-section {
            margin: 1em;
            margin-left: 0;
            padding: 0.2em 0 0.2em 1em;
            color: $gray-800;
            border-left: 4px solid $gray-400;
            background: none;
        }
    }

    .system-fallback-font {
        font-family: "Arial", sans-serif;
    }

    code {
        display: inline-block;
        margin: 1em 0 0.5em;
        padding: 0.3em;
        background: rgba($gray-200, 0.6);
        clear: both;

        span {
            font-weight: bold;
        }
    }

    .spec {
        color: $gray-400;
        margin-top: 0.5em;
    }

    .flex-container {
        display: flex;

        &.color,
        &.gradient,
        &.sg-shadows,
        &.sg-icons {
            flex-wrap: wrap;
            justify-content: left;
            text-align: center;

            .item {
                display: flex;
                flex-wrap: wrap;
                justify-content: center;
                align-items: stretch;
                align-content: flex-start;
                flex: 0 1 200px;
                margin: 0 auto 1em;

                > *:not(:first-child) {
                    flex: 1 1 100%;
                }

                @include media-breakpoint-up(md) {
                    flex: 0 1 23%;
                    margin: 0 1% 1em;
                }
            }
        }

        &.color {
            .item {
                text-align: left;
            }
        }

        &.sg-icons {
            .item {
                padding-top: rem(20px);
                margin-bottom: rem(20px);
                @include media-breakpoint-up(md) {
                    flex: 0 1 14%;
                }
            }

            .icon-container {
                min-height: 65px;
            }

            &.small-icons {
                .icon-container {
                    min-height: 35px;
                }
            }
        }

        &.sg-motion {
            flex-wrap: wrap;
            justify-content: space-between;
            text-align: center;

            .item {
                display: flex;
                flex-wrap: wrap;
                justify-content: center;
                align-items: stretch;
                flex: 0 1 200px;
                margin: 0 auto 1em;

                > *:not(:first-child) {
                    flex: 1 1 100%;
                }
            }
        }

        &.sg-borders,
        &.sg-divider {
            flex-wrap: wrap;
            justify-content: space-between;

            .item {
                flex: 1 1 100%;

                @include media-breakpoint-up(sm) {
                    flex: 1 1 45%;
                    margin: 0 5% 2em 0;

                    &:last-child {
                        flex: 0 0 45%;
                    }
                }
            }
        }
    }

    .sg-type {
        .item {
            margin-bottom: 2em;

            > * {
                flex: 1 1 30%;
                margin-right: 1%;

                &:nth-child(2) {
                    align-self: start;
                }
            }
        }
    }

    .sg-buttons {
        .item {
            margin-bottom: 2em;

            .btn {
                margin-right: 2em;
                margin-bottom: 1em;
            }

            .spec,
            code {
                margin: 0;
                margin-bottom: 0.7em;
            }
        }
    }

    .sg-forms {
        @include media-breakpoint-up(md) {
            width: 25%;
        }
    }

    .sg-grid {
        .col {
            min-height: 400px;
            background: mistyrose;
            padding-right: 4px;
            padding-left: 4px;
            border-right: $border;

            &:last-child {
                border-right: none;
            }
            @include media-breakpoint-up(md) {
                padding-right: 12px;
                padding-left: 12px;
            }
        }
    }

    .sg-grid-demo {
        .col {
            border: $border;

            span {
                float: right;
            }

            .sm,
            .md,
            .lg,
            .xl {
                display: none;
            }

            @include media-breakpoint-up(sm) {
                .xs {
                    display: none;
                }

                .sm {
                    display: block;
                }
            }

            @include media-breakpoint-up(md) {
                .sm {
                    display: none;
                }

                .md {
                    display: block;
                }
            }

            @include media-breakpoint-up(lg) {
                .md {
                    display: none;
                }

                .lg {
                    display: block;
                }
            }

            @include media-breakpoint-up(xl) {
                .lg {
                    display: none;
                }

                .xl {
                    display: block;
                }
            }
        }
    }

    .sg-spacers {
        .spacer {
            background: mistyrose;
            font-size: 10px;
            text-align: center;

            &._8 {
                height: 8px;
            }

            &._24 {
                height: 24px;
            }

            &._40 {
                height: 40px;
            }

            &._72 {
                height: 72px;
            }
        }

        small {
            display: block;
        }
    }

    .sg-lists {
        ul, // hack for dashes
        ol {
            ul,
            ol {
                list-style-type: none;

                li::before {
                    content: "\2014";
                    position: absolute;
                    margin-left: -20px;
                }
            }
        }
    }

    .sg-borders {
        // Set the list of border blocks in order of how they should appear in the style guide.
        $bordercolorlist: (
            $border-color,
            $border-color,
            $border2-color,
            $border3-color,
            $border4-color
        );

        @for $i from 1 through length($bordercolorlist) {
            $c: nth($bordercolorlist, $i);

            .item:nth-child(#{$i}) .border-block {
                border-color: $c;
                border-bottom: 1px solid $c;
                border-left: 1px solid $c;
            }

            .item:nth-child(2) .border-block {
                border-width: 4px;
            }
        }
    }

    .sg-shadows {
        // Set the list of shadow blocks in order of how they should appear in the style guide.
        $shadowlist: ($shadow, $shadow2, $shadow3);

        @for $i from 1 through length($shadowlist) {
            $c: nth($shadowlist, $i);

            .item:nth-child(#{$i}) .shadow-block {
                box-shadow: $c;
                border: $border;
                background: $white;
            }
        }
    }

    .sg-cards {
        .card-deck {
            @include media-breakpoint-up(sm) {
                display: flex;
                flex-flow: row wrap;

                .card {
                    margin-bottom: $card-deck-margin;
                    flex: 1 1 auto;

                    @include media-breakpoint-up(md) {
                        flex: 1 0 40%;
                    }

                    @include media-breakpoint-up(lg) {
                        flex: 1 0 20%;
                    }
                }
            }
        }
    }

    .sg-motion {
        .card {
            height: 140px;
            width: 140px;
            background-color: $primary;

            &.animation.easeincubic:hover {
                animation: $ease-in-cubic;
            }

            &.animation.easeoutcubic:hover {
                animation: $ease-out-cubic;
            }

            &.hover:hover {
                transform: $card-hover-scale;
                transition: all 0.5s ease;
            }
        }

        .btn {
            height: 40px;
            width: 200px;

            &.hover:hover {
                transform: $button-hover-scaley;
                transition: all 0.5s ease;
            }
        }
    }
}

// Colors

.item {
    .color-block {
        position: relative;
        width: 200px;
        height: 200px;
        margin-bottom: 5px;
        color: $gray-100;
    }

    .color-var {
        text-align: center;
        margin-bottom: 10px;
    }

    .color-spec {
        text-align: center;
        line-height: 150%;
        margin-bottom: 10px;
    }

    .gradient-block {
        width: 200px;
        height: 200px;
        margin-bottom: 5px;
    }

    .border-block {
        height: 30px;
    }

    .shadow-block {
        height: 200px;
        width: 200px;
    }
}

// TODO - Using this mixin instead of the utilities - do we want to use utilities?

.brand-colors {
    // Set the list of color blocks in order of how they should appear in the style guide.
    $colorlist: ($brand-main, $brand-second, $brand-light, $brand-dark);

    @for $i from 1 through length($colorlist) {
        $c: nth($colorlist, $i);

        .item:nth-child(#{$i}) .color-block {
            background-color: $c;
            border-radius: $border-radius;

            &::before {
                content: "#{$c}";
                color: $white;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                @if lightness($c) > 75 {
                    color: $gray-600;
                }
            }

            @if lightness($c) > lightness($light-gray) {
                border: 1px solid $gray-600;
            }
        }
    }
}

.ui-colors {
    // Set the list of color blocks in order of how they should appear in the style guide.
    $colorlist: (
        $primary,
        $secondary,
        $dark,
        $light,
        $success,
        $info,
        $warning,
        $danger
    );

    @for $i from 1 through length($colorlist) {
        $c: nth($colorlist, $i);

        .item:nth-child(#{$i}) .color-block {
            background-color: $c;
            border-radius: $border-radius;

            &::before {
                content: "#{$c}";
                color: $white;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                @if lightness($c) > 75 {
                    color: $gray-600;
                }
            }

            @if lightness($c) > lightness($light-gray) {
                border: 1px solid $gray-600;
            }
        }
    }
}

.accent-colors {
    // Set the list of color blocks in order of how they should appear in the style guide.
    $colorlist: ($accent-1, $accent-2, $accent-3, $accent-4);

    @for $i from 1 through length($colorlist) {
        $c: nth($colorlist, $i);

        .item:nth-child(#{$i}) .color-block {
            background-color: $c;
            border-radius: $border-radius;

            &::before {
                content: "#{$c}";
                color: $white;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                @if lightness($c) > 75 {
                    color: $gray-100;
                }
            }

            @if lightness($c) > lightness($light-gray) {
                border: 1px solid $gray-100;
            }
        }
    }
}

.gray-colors {
    // Set the list of color blocks in order of how they should appear in the style guide.
    $colorlist: (
        $black,
        $gray-800,
        $gray-600,
        $gray-400,
        $gray-200,
        $gray-100,
        $white
    );

    @for $i from 1 through length($colorlist) {
        $c: nth($colorlist, $i);

        .item:nth-child(#{$i}) .color-block {
            background-color: $c;
            border-radius: $border-radius;

            &::before {
                content: "#{$c}";
                color: $white;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                @if lightness($c) > 75 {
                    color: $gray-600;
                }
            }

            @if lightness($c) > lightness($light-gray) {
                border: 1px solid $gray-600;
            }
        }
    }
}
